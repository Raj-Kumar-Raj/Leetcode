class Solution {
    public String removeKdigits(String num, int k) {
        // stack to store the digits 
        Stack<Character> stack = new Stack<>();

        // pushing the element is increasing order 
        for(char digit : num.toCharArray()){
            while(!stack.isEmpty() && k > 0 && stack.peek()>digit){
                stack.pop();
                k--;
            }

            stack.push(digit);
        }


        // removing the element fromt he stack if still the k is not equal to zero 

        while(k>0 && !stack.isEmpty()){
            stack.pop();
            k--;
        }

        // constructing the result from the stack 

        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()){
            sb.append(stack.pop());
        }
          sb.reverse(); // to get the corect order 

          // removing the leading zeros

          while(sb.length()>0 && sb.charAt(0)=='0'){
            sb.deleteCharAt(0);
          }

          // handling the edge case 

          return sb.length()>0 ? sb.toString():"0";
    }
}
