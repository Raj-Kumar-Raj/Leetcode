/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
      private  ListNode reverse(ListNode head){
               if(head == null || head.next == null )
               return head ;
               ListNode curr = head ;
               ListNode prev = null;
               while(curr.next != null){
                ListNode temp = curr.next;
                curr.next = prev;
                prev = curr;
                curr = temp;
               }
               return curr;
        }

        private ListNode getRigthHalf (ListNode head ){
            if (head == null) return null;
            ListNode slow = head;
            ListNode fast = head.next;

            while(fast != null && fast .next != null){
                slow = slow.next ;
                fast = fast.next;

            }

            return slow.next;
        }

    public boolean isPalindrome(ListNode head) {
        ListNode p1 = head;
        ListNode p2 = reverse(getRigthHalf (head));
         while(p1 != null && p2 != null){
            if(p1.val != p2.val){
                return false;
            }else{
                p1 = p1.next ;
                p2 = p2.next;
            }
         }
         return true;
    }
}
    

